(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{699:function(t,a,s){"use strict";s.r(a);var n=s(70),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("大家都是有一定的 C语言的基础的，所以就先罗列一下 python 与 c 语言的区别；从某种角度上来说，python 是一种脚本语言")]),t._v(" "),s("h3",{attrs:{id:"写在前面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[t._v("#")]),t._v(" 写在前面")]),t._v(" "),s("blockquote",[s("p",[t._v("以下演示脚本基于  Python 3.7.2")])]),t._v(" "),s("p",[t._v("你需要在电脑上面安装并配置好自己的 Python 版本 "),s("a",{attrs:{href:"https://dev.tencent.com/s/21d676cc-f47d-4ffc-affe-df3e8df5e789",target:"_blank",rel:"noopener noreferrer"}},[t._v("Windows"),s("OutboundLink")],1),t._v(" | "),s("a",{attrs:{href:"https://dev.tencent.com/s/26555f08-8e04-47d5-a81d-cd45a4683c58",target:"_blank",rel:"noopener noreferrer"}},[t._v("macOS"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("编辑器推荐使用 VS Code 加上响应的插件 python 即可，或者使用集成开发工具语言 Pycharm。使用更加现代化的开发工具可以大大提高你的开发效率以及 Debug 能力。")]),t._v(" "),s("h3",{attrs:{id:"python-与-c-语言的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python-与-c-语言的区别"}},[t._v("#")]),t._v(" python 与 C 语言的区别")]),t._v(" "),s("p",[t._v("大家都是有一定的 C语言的基础的，所以就先罗列一下 python 与 c 语言的区别；从某种角度上来说，python 是一种脚本语言，代码书写速度比较快，也就是说，实现同样的功能 python 所需要写的代码更少，但是在执行速度方面，python 的速度跟 c 相比速度会慢一些；即使这样，耐不住他写着方便啊！")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是一段 C 语言代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("learning")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s start to learn reverse!\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Xerrors"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I want to learn reverse!!!\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("learning")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这是一段 python")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("learning")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s start to learn reverse!"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Xerrors'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I want to learn reverse!!!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlearning"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("两段代码都可以实现输出")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("I want to learn reverse!!!\nXerrors start to learn reverse!\n")])])]),s("p",[t._v("但是从这两段代码中可以简单看到这两个语言的一些区别：")]),t._v(" "),s("ul",[s("li",[t._v("python 中，数据类型这一概念在编程时被弱化了，体现在变量和函数方面。")]),t._v(" "),s("li",[t._v("python 中没有 main 函数，代码是顺序执行。")]),t._v(" "),s("li",[t._v("python 自带许多的基础库，不需要额外引入其他库实现基本功能。")]),t._v(" "),s("li",[t._v("python 的代码块并不是使用大括号来实现，而是使用冒号和缩进实现的。")]),t._v(" "),s("li",[t._v("python 的输出自带换行，不需要使用转义字符 \\n")])]),t._v(" "),s("p",[t._v("实现最简单的 python 程序，输出 HelloWorld!")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloWorld!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("恭喜你，已经是一个 pythoner 了")]),t._v(" "),s("h3",{attrs:{id:"基础语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础语法"}},[t._v("#")]),t._v(" 基础语法")]),t._v(" "),s("h4",{attrs:{id:"_1-缩进"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-缩进"}},[t._v("#")]),t._v(" 1. 缩进")]),t._v(" "),s("p",[t._v("Python不用括号来表示语种块，也不用开始或结束标志符来表示，而是靠缩进，用四个空格表示。要注意的是在代码块开始的上一行的末尾加上一个冒号，如下面实例所示。C语言中的代码块是使用一对花括号来表示。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'9 is greater than 8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lalalala'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2-注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-注释"}},[t._v("#")]),t._v(" 2. 注释")]),t._v(" "),s("p",[t._v("单行注释：采用 # 开头\n多行注释（docString）：采用三个引号"),s("code",[t._v('"""')]),t._v("开头，三个引号结束，单引号和双引号都可以。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里是一个单行注释")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n多行注释用三个引号就可以\n换个行也是没问题的\n'''")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n双引号也是可以的\n换个行看看\n"""')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloWorld!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"_3-防止中文注释报错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-防止中文注释报错"}},[t._v("#")]),t._v(" 3. 防止中文注释报错")]),t._v(" "),s("p",[t._v("因为有时不同文件的编码格式不同，所以当文件中出现中文的时候程序无法识别就会报错，所以需要在前面指定编码的类型来防止报错。一般有下面两个解决办法，推荐使用第一个，简单粗暴。")]),t._v(" "),s("ul",[s("li",[t._v("在文件开头加一行注释： "),s("code",[t._v("# coding: utf-8")])]),t._v(" "),s("li",[t._v("也可在设置里找到”File Encodings”设置为UTF-8")])]),t._v(" "),s("h3",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("p",[t._v("上面我们已经提到，python 在整个语言中都淡化了数据类型这一概念，更在乎数据的具体使用，所以在 python 中，基础的数据类型有：")]),t._v(" "),s("ul",[s("li",[t._v("整数 int")]),t._v(" "),s("li",[t._v("小数 float")]),t._v(" "),s("li",[t._v("字符串 str")])]),t._v(" "),s("p",[t._v("也就是说在C语言里面的很多数据类型都变成了常用的 int 和 float，如果是整数就是 int，如果是小数就是 float，当然 python 已经把这些改变进行弱化，我们不必过度关心变量的数据类型，用就完事了。因为我们在使用变量的时候 python 可以根据所赋的值的类型来设置变量的类型，不需要手动设置。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 type() 可以查看变量的数据类型")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("67")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 整数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <class 'int'>")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("79.0")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 小数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <class 'float'>")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hahah'")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <class 'str'>")]),t._v("\n")])])]),s("p",[t._v("需要注意的是：在 python 中，int 型数据理论上是可以表示到无穷大的，也就是没有数据大小的上限，不需要考虑溢出或者越界问题，这也是 python 在数据处理以及科学计算方面比较流行的一个原因。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://dev.tencent.com/api/project/4253869/files/4844861/imagePreview",alt:"图片"}})]),t._v(" "),s("p",[t._v("字符串的数据类型的赋值可以直接使用一个字符串进行赋值，只需要将字符串使用单引号或者双引号括起来就好，两种表示方法是一样的，比如：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'single'")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# single")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# double")]),t._v("\n")])])]),s("p",[t._v("那么问题来了，在 C语言中存在字符型数据，是使用单引号括起来的。在 python 中应该如何表示一个字符呢？其实，一个字符就是相当于只有一个字符的字符串，所以想要表示字符就可以直接使用表示字符串的方法就可以。python 会把它当做一个字符串进行处理。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <class 'str'>")]),t._v("\n")])])]),s("p",[t._v("因为字符串部分的内容比较多，也是逆向题目中经常使用到的一部分内容，关于字符串部分的详细讲解会在后面的不远处进行介绍~ 这里就简单介绍一下~ 稍等~")]),t._v(" "),s("h3",{attrs:{id:"操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作符"}},[t._v("#")]),t._v(" 操作符")]),t._v(" "),s("p",[t._v("python 的操作符跟其他的语言类似，主要分为以下几种：")]),t._v(" "),s("ul",[s("li",[t._v("算术运算符")]),t._v(" "),s("li",[t._v("比较运算符")]),t._v(" "),s("li",[t._v("逻辑运算符")]),t._v(" "),s("li",[t._v("位运算符")])]),t._v(" "),s("p",[t._v("这里只介绍了一些常用的，如果需要更多的了解的话，点击这里"),s("a",{attrs:{href:"http://www.runoob.com/python3/python3-basic-operators.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("了解更多"),s("OutboundLink")],1)]),t._v(" "),s("h4",{attrs:{id:"算术运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[t._v("#")]),t._v(" 算术运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("Operator")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Operatorr")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Example")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("+")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Addition")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x + y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("-")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Subtraction")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x - y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("*")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Multiplication")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x * y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("/")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Division")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x / y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("%")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Modulus")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x % y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("**")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Exponentiation")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x ** y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("//")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Floor division")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x // y")])])])]),t._v(" "),s("p",[s("code",[t._v("**")]),t._v(" 表示次方，不需要使用 "),s("code",[t._v("pow()")]),t._v(" 函数就可以表示次方了，非常好用的一个方法。另外，因为 python 中的除法 "),s("code",[t._v("/")]),t._v(" 的结果是会计算小数的，所以这时候就需要一个可以取整的运算符，也就是 "),s("code",[t._v("//")]),t._v(" 表示整除，也是很有可能用到的一个工具，除此之外运算符的使用C语言中的使用几乎没有区别。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.2")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 27.040000000000003")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3.0")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2779905.883635713")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.7307692307692306")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.0")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"比较运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[t._v("#")]),t._v(" 比较运算符")]),t._v(" "),s("p",[t._v("等同于 C 语言")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("Operator")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Name")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Example")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("==")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Equal")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x == y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("!=")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Not equal")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x != y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v(">")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Greater than")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x > y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("<")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Less than")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x < y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v(">=")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Greater than or equal to")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x >= y")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("<=")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Less than or equal to")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x <= y")])])])]),t._v(" "),s("h4",{attrs:{id:"逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),s("p",[t._v("直接使用相应的英文单词就可以表示逻辑上的与、或、非")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("Operator")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Description")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Example")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("and")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Returns True if both statements are true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x < 5 and  x < 10")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("or")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Returns True if one of the statements is true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x < 5 or x < 4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("not")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Reverse the result, returns False if the result is true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("not(x < 5 and x < 10)")])])])]),t._v(" "),s("h4",{attrs:{id:"位运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[t._v("#")]),t._v(" 位运算符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("Name")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Description")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("exp")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("&")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("与")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("同时为 1 结果为 1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("|")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("或")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("只要有 1 结果为 1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("^")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("抑或")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("两者只有一个是 1 结果为 1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("~")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("非")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("取反")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("<<")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("左移")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("左移，右边补 0")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v(">>")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("右移")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("有符号右移，左边补最高位")])])])]),t._v(" "),s("p",[t._v("这里的右移是跟有些语言不一样的，python 中在右移的时候，左边空出来的位由最高位的值代替，也就是符号位，所以称之为有符号右移。而有些语言是在前面补 0，称为无符号右移。")]),t._v(" "),s("h3",{attrs:{id:"逻辑判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑判断"}},[t._v("#")]),t._v(" 逻辑判断")]),t._v(" "),s("p",[t._v("使用 if else 可以进行判断，这是一个共识，但是在 python 中的写法会有所不同。")]),t._v(" "),s("ol",[s("li",[t._v("代码块使用冒号以及缩进表示")]),t._v(" "),s("li",[t._v("在进行逻辑判断时，不需要加括号（加了也没错）")]),t._v(" "),s("li",[t._v("逻辑运算符分别为 and、or、not")]),t._v(" "),s("li",[t._v("else if 使用 elif 代替")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a 比 b 大'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a 比 b 小'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a, b 相等'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[t._v("#")]),t._v(" 循环")]),t._v(" "),s("p",[t._v("python 中的循环主要就是两种，while 循环和 for 循环。循环中同样可以使用 break 或者 continue 来跳出或者终止循环。")]),t._v(" "),s("h4",{attrs:{id:"while-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#while-循环"}},[t._v("#")]),t._v(" while 循环")]),t._v(" "),s("p",[t._v("while 循环非常简单，只有一个判断条件，在用法上面跟 C 语言是一样的，不同点就是在代码的语法上的不同，下面就通过一个简单的例子来理解一下 python 中的 while 循环（一看就懂系列）")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("上面需要注意的地方是：python 中是不存在 "),s("code",[t._v("i--")]),t._v(" 或者 "),s("code",[t._v("i++")]),t._v(" 操作的，要想实现类似的功能，需要使用 "),s("code",[t._v("i += 1")]),t._v("， "),s("code",[t._v("i -= 1")])]),t._v(" "),s("h4",{attrs:{id:"for-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-循环"}},[t._v("#")]),t._v(" for 循环")]),t._v(" "),s("p",[t._v("for 循环在 python 中使用的主要是 for in 结构；也是最经常使用的结构。")]),t._v(" "),s("h5",{attrs:{id:"基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[t._v("#")]),t._v(" 基本用法")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" sequence"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),s("p",[t._v("item 代表 sequence 中的一个元素，如果 sequence 是一个字符串，item 就是字符，for 循环的作用就是把 sequence 里面的每一个元素依次赋值给 item，并执行后续代码块的操作。下面看一个简单的例子：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("stra "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NoPwnNoFun!"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" char "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" stra"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("char"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# N,o,P,w,n,N,o,F,u,n,!,")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("【提示】end 是 python 中 print 的一个参数，决定每次输出以什么结尾，默认 end = '\\n'，后面介绍输出的时候会再次提到。")])]),t._v(" "),s("h5",{attrs:{id:"数字迭代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字迭代"}},[t._v("#")]),t._v(" 数字迭代")]),t._v(" "),s("p",[t._v("在 for 循环中，最经常用到的就是数字的迭代，比如从 0 迭代到 n，"),s("code",[t._v("for i in range(n)")]),t._v("。也就是对应着C语言中的 "),s("code",[t._v("for (int i = 0; i < n; i++)")]),t._v("，在 python 中可以借用 range 函数进行快速的迭代。由于 range 用的几率很大，所以这里就多介绍一下，一边介绍 range 一边介绍 for 循环。")]),t._v(" "),s("p",[t._v("range 的实质是快速生成按照一定顺序排列的整数，一般有三个用法：分别对应不同的参数个数。")]),t._v(" "),s("ul",[s("li",[t._v("当 range 只有一个参数的时候。")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# output")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2")]),t._v("\n")])])]),s("p",[t._v("可以看到，这个时候，i 的值会从开始增加一直增加到 n - 1. 作用是不是等效与上面的 C语言代码? "),s("code",[t._v("for (int i = 0; i < n; i++)")]),t._v(" 同样表示从 0 开始，依次增加 1，但是不等于 n。")]),t._v(" "),s("ul",[s("li",[t._v("当 range 有两个参数的时候。")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# output")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3")]),t._v("\n")])])]),s("p",[t._v("有了两个参数之后，第一个参数代表遍历的起始位置，第二个参数代表遍历的结束位置，但是不包含结束位置。也就是一个左闭右开的区间。（左闭右开的情况在 python 的其他地方也会遇见，记得留意）")]),t._v(" "),s("ul",[s("li",[t._v("当 range 有三个参数的时候。")])]),t._v(" "),s("p",[t._v("当然，为了适用于更多的情况，range 还有第三个参数，代表步长，默认值为 1。步长的意思是每次递增的时候递增的值的大小（好拗口）。只见看例子吧，一看就懂！")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 步长不是 1 的情况")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1 3 5 7")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 步长为负数的情况，反向走")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 5 4 3 2 ")]),t._v("\n")])])]),s("h5",{attrs:{id:"迭代多个对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代多个对象"}},[t._v("#")]),t._v(" 迭代多个对象")]),t._v(" "),s("p",[t._v("用法")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("zip")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seq1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" seq2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 三个也是可以的")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),s("p",[t._v("举例")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("lista "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nlistb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("zip")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lista"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j， end"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 5 7 9")]),t._v("\n")])])]),s("h5",{attrs:{id:"访问元素的同时访问下标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问元素的同时访问下标"}},[t._v("#")]),t._v(" 访问元素的同时访问下标")]),t._v(" "),s("p",[t._v("用法")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("enumerate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sequence"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),s("p",[t._v("举例")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("stra "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("enumerate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stra"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# output")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 H")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1 e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2 l")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3 l")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4 o")]),t._v("\n")])])]),s("h4",{attrs:{id:"输入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输入"}},[t._v("#")]),t._v(" 输入")]),t._v(" "),s("p",[t._v("输入非常简单，因为只有一个获取输入的方法。那就是 input()")]),t._v(" "),s("p",[t._v("不同于其他语言的获取输入的方式，python 的获取输入的方式非常简单粗暴，按行获取输入，一个 input() 函数读取一行的数据，然后以字符串的形式返回。所以获取输入的方法就是：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# input")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Hello")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# output")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Hello")]),t._v("\n")])])]),s("p",[t._v("简单粗暴，一点都不花里胡哨的。input() 的括号里面还可以传入字符串来当作输入提示。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"please input something you like:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("运行结果")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("please input something you like:python is great!\npython is great!\n")])])]),s("p",[t._v("input 的用法，也就这些，要想获取更加复杂的输出，后面介绍字符串处理以及数据处理的时候会详细介绍。")])])}),[],!1,null,null,null);a.default=e.exports}}]);