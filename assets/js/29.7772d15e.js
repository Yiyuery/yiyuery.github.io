(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{664:function(t,n,s){"use strict";s.r(n);var a=s(70),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("之前咱们所设计的语法分析器是使用C++自己编写的，尽管我们只是实现了一个简单的功能，但是还是费了九牛二虎之力，那么这一节，我们就开始使用Bison工具快速为我们创建一个功能强啊的语法分析器，话不多说，各位同学往下看吧！")]),t._v(" "),s("p",[s("strong",[t._v("软件及可参考资源")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://cs.nju.edu.cn/daixinyu/1006.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("南京大学-词法分析和语法分析课件"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://sourceforge.net/projects/winflexbison/",target:"_blank",rel:"noopener noreferrer"}},[t._v("windows平台下flex和Bison下载地址"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_1-题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-题目描述"}},[t._v("#")]),t._v(" 1. 题目描述")]),t._v(" "),s("p",[t._v("基于词法分析程序自动构造工具Flex与语法分析程序自动构造工具Bison，编制简单的计算器程序。")]),t._v(" "),s("p",[t._v("参考示例程序, 用Flex和Bison实现一个功能更为强大的计算器，尽可能多的包含以下运算（支持浮点数）：")]),t._v(" "),s("ul",[s("li",[t._v("加、减、乘、除运算")]),t._v(" "),s("li",[t._v("乘方power、开方sqrt运算")]),t._v(" "),s("li",[t._v("三角函数运算 – sin、cos...")]),t._v(" "),s("li",[t._v("求阶乘")]),t._v(" "),s("li",[t._v("求log以10为底的对数")])]),t._v(" "),s("h3",{attrs:{id:"题目分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目分析"}},[t._v("#")]),t._v(" 题目分析")]),t._v(" "),s("p",[t._v("题目看起来还挺复杂的，而且还用到了没接触过的Bison工具。关于Bison的用法和语法可以参考上面的南京大学的课件里面的内容，比我讲的要好得多。那么下面的内容就是假设你已经知道了Bison的用法了。")]),t._v(" "),s("p",[t._v("为了使用Bison的语法分析，我们首先要有一个词法分析器，这是就改造我们之前使用Flex创建的词法分析器吧。这里顺便提一下语法分析的过程，首先我们把词法分析的代码写在以"),s("code",[t._v(".y")]),t._v("结尾的文件里面，然后编译会生成"),s("code",[t._v(".tab.h")]),t._v("的文件，然后把这个文件在"),s("code",[t._v(".l")]),t._v("文件里面包含进去，然后使用flex编译生成"),s("code",[t._v("lex.yy.c")]),t._v("文件，这个文件就是最后的语法分析器。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("option noyywrap\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"calc.tab.h"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nDIGIT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\nFLOAT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("DIGIT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("DIGIT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"+"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ADD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-"')]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" SUB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" MUL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DIV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"("')]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" OP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('")"')]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" CP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" CO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!"')]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DEG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("DIGIT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" yylval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("YYSTYPE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atoi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("yytext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" NUMBER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("FLOAT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" yylval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("YYSTYPE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("yytext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" FLOAT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pow"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" POW"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sqrt"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" SQRT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sin"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" SIN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cos"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" COS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"log"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" LOG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"//"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" \\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ignore white space */")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("yyerror")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mystery character"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("\n")])])]),s("h2",{attrs:{id:"_2-实现方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现方法"}},[t._v("#")]),t._v(" 2. 实现方法")]),t._v(" "),s("p",[t._v("首先是我们要实现计算器程序的文法，文法实现之后就是这个样子：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('calclist: /*nothing */ \n | calclist exp { printf("%g", $2); return 0;}\n ;\nexp: factor\n | exp ADD exp { $$ = $1 + $3; }\n | exp SUB factor { $$ = $1 - $3; }\n ;\n \nfactor: term\n | factor MUL term { $$ = $1 * $3; }\n | factor DIV term { $$ = $1 / $3; }\n ;\n \nterm: NUMBER { $$ = $1;}\n | FLOAT { $$ = $1;}\n | term DEG { $$ = deg($1);}\n | OP exp CP { $$ = $2; }\n | SQRT OP term CP { $$ = sqrt($3); }\t// sqrt(term)\n | LOG OP term CP { $$ = log10($3); }\t// log(term)\n | SIN OP term CP { $$ = sin($3 / 180 * PI); }\t// sin(term)\n | COS OP term CP { $$ = cos($3 / 180 * PI); }\t// cos(term)\n | OP exp CP OP exp CP { $$ = $2 * $5; }\t// (exp)(exp)\n | POW OP term CO term CP { $$ = pow($3, $5); }\t// pow(term, term)\n ;\n')])])]),s("p",[t._v("应该容易看懂吧，关键就是在文法的部分。剩下的也没有什么可说的，主要是最后面在实现阶乘的时候需要使用递归，所以写了一个递归函数在后面。")]),t._v(" "),s("h2",{attrs:{id:"_3-代码总览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码总览"}},[t._v("#")]),t._v(" 3. 代码总览")]),t._v(" "),s("blockquote",[s("p",[t._v("calc.y")])]),t._v(" "),s("div",{staticClass:"language-y extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('%{\n# include <stdio.h>\n# include <stdlib.h>\n# include <math.h>\n# define YYSTYPE float\n# define PI acos(-1)\nint yylex();\nint yyerror();\nfloat deg(int n);\n%}\n\n%token NUMBER FLOAT\n%token ADD SUB MUL DIV ABS\n%token OP CP CO EOL\n%token POW SQRT LOG SIN COS DEG\n\n%%\n \ncalclist: /*nothing */ \n | calclist exp { printf("%g", $2); return 0;}\n ;\nexp: factor\n | exp ADD exp { $$ = $1 + $3; }\n | exp SUB factor { $$ = $1 - $3; }\n ;\n \nfactor: term\n | factor MUL term { $$ = $1 * $3; }\n | factor DIV term { $$ = $1 / $3; }\n ;\n \nterm: NUMBER { $$ = $1;}\n | FLOAT { $$ = $1;}\n | term DEG { $$ = deg($1);}\n | OP exp CP { $$ = $2; }\n | SQRT OP term CP { $$ = sqrt($3); }\n | LOG OP term CP { $$ = log10($3); }\n | SIN OP term CP { $$ = sin($3 / 180 * PI); }\n | COS OP term CP { $$ = cos($3 / 180 * PI); }\n | OP exp CP OP exp CP { $$ = $2 * $5; }\n | POW OP term CO term CP { $$ = pow($3, $5); }\n ;\n%%\n\nfloat deg(int n) {\n  if (n == 1) {\n    return 1;\n  } else {\n    return n * deg(n-1);\n  }\n}\n\nint main() {\n  yyparse();\n}\n \nint yyerror(char *s) {\n  fprintf(stderr, "error: %s\\n", s);\n}\n')])])]),s("blockquote",[s("p",[t._v("calc.l")])]),t._v(" "),s("div",{staticClass:"language-l extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('%option noyywrap\n%{\n# include"calc.tab.h"\n%}\n\nDIGIT [0-9]+\nFLOAT {DIGIT}[.]{DIGIT}\n\n%%\n"+"  { return ADD; }\n"-"   { return SUB; }\n"*"  { return MUL; }\n"/"   { return DIV; }\n"("     { return OP; }\n")"     { return CP; }\n","     { return CO; }\n"!"     { return DEG; }\n\n{DIGIT} { yylval = (YYSTYPE)atoi(yytext); return NUMBER; }\n{FLOAT} { yylval = (YYSTYPE)atof(yytext); return FLOAT; }\n\n"pow" { return POW; }\n"sqrt" { return SQRT; }\n"sin" { return SIN; }\n"cos" { return COS; }\n"log" { return LOG; }\n\n"//".* \n[ \\t]   { /* ignore white space */ }\n.      { yyerror("Mystery character"); }\n%%\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);