(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{696:function(t,s,a){"use strict";a.r(s);var n=a(70),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-模块"}},[t._v("#")]),t._v(" 1. 模块")]),t._v(" "),a("h3",{attrs:{id:"_1-1-引用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-引用方法"}},[t._v("#")]),t._v(" 1. 1 引用方法")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" turtle\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" turtle "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" size【"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("】\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" mymodule "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 【"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("】\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("警告：")]),a("br"),t._v("\n【1】一般来说，你应该尽量避免使用 from...import 语句，而去使用 import 语句。这是为了避免在你的程序中出现名称冲突，同时也为了使程序更加易读。"),a("br"),t._v("\n【2】这将导入诸如 say_hi 等所有公共名称，但不会导入 "),a("strong",[t._v("version")]),t._v(" 名称，因为后者以双下划线开头。")])]),t._v(" "),a("h3",{attrs:{id:"_1-2典型的库函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2典型的库函数"}},[t._v("#")]),t._v(" 1.2典型的库函数：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("标准库模块 ：**sys**\n海龟绘图库：**turtle**\n随机数模块：**random**\n…\n")])])]),a("p",[a("strong",[t._v("Sys")]),t._v("\n- sys.argv 存储命令行传递参数的一个列表\n- sys.path 包含了导入模块的字典名称列表")]),t._v(" "),a("h3",{attrs:{id:"_1-3-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-name"}},[t._v("#")]),t._v(" 1.3 "),a("strong",[t._v("name")])]),t._v(" "),a("p",[t._v("每个模块都有一个名称，而模块中的语句可以找到它们所处的模块的名称。\n这对于确定模块是独立运行的还是被导入进来运行的这一特定目的来说大为有用。当语句在执行时，能通过判断__name__是否为__main__来判断该模块是否是当前模块。")]),t._v(" "),a("h3",{attrs:{id:"_1-4-dir-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-dir-函数"}},[t._v("#")]),t._v(" 1.4 dir 函数")]),t._v(" "),a("p",[t._v("内置的 dir() 函数能够返回由对象所定义的名称列表。 如果这一对象是一个模块，则该列表会包括函数内所定义的函数、类与变量。\n例：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sys\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#能够看到sys所包含的一个巨大的属性列表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#当不传递参数的时候，默认返回当前模块的属性列表。")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("同时，还有一个 vars() 函数也可以返回给你这些值的属性，但只是可能，它并不能针对所有类都能正常工作。")])]),t._v(" "),a("h3",{attrs:{id:"_1-5-包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-包"}},[t._v("#")]),t._v(" 1.5 包")]),t._v(" "),a("p",[t._v("模块可以看作是把一系列函数组织在一起，而包就相当于把一系列模块组织在一起。包是指一个包含模块以及一个特殊的__init__.py 的文件的文件夹。\n例如：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("some folder present "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the sys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" world"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" __init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" asia"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" __init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" india"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" __init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py\n                "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" africa"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" __init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" madagascar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" __init__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py\n                "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py \n")])])]),a("h2",{attrs:{id:"_2-docstring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-docstring"}},[t._v("#")]),t._v(" 2. DocString")]),t._v(" "),a("p",[t._v("文档字符串：出现在函数的第一行，约定其中第一行以某一大写字母开始，以句号结束。第二行为空行，后跟的第三行开始是任何详细的解释说明。")]),t._v(" "),a("p",[t._v("用法：\n"),a("code",[t._v("print_max.__doc__")])]),t._v(" "),a("blockquote",[a("p",[t._v("文档字符串也适用于后面相关章节将提到的模块（Modules）与类（Class）")])]),t._v(" "),a("h2",{attrs:{id:"_3-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据结构"}},[t._v("#")]),t._v(" 3. 数据结构")]),t._v(" "),a("p",[t._v("一种用来存储一系列相关数据的集合，python 中有四种内置的数据结构，"),a("strong",[t._v("列表，元组，字典，集合")])]),t._v(" "),a("h3",{attrs:{id:"_3-1-列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-列表"}},[t._v("#")]),t._v(" 3.1 列表")]),t._v(" "),a("p",[t._v("形式："),a("code",[t._v("L = [1,2,3,4,5]")]),t._v("\n特点：项目可更改（Mutable），列表也是一个序列。")]),t._v(" "),a("h3",{attrs:{id:"_3-2-元组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-元组"}},[t._v("#")]),t._v(" 3.2 元组")]),t._v(" "),a("p",[t._v("形式："),a("code",[t._v("T = (‘a’, ‘b’, ‘c’)")]),t._v(" 括号可选，但习惯上不省略\n特点：元素/项目不能更改，元组也是一个序列。\n注：当元组里面只有一个元素时，为了避免歧义，需要把元组的第一个元素之后加上逗号 例"),a("code",[t._v("tuple_demo = (1,)")])]),t._v(" "),a("h3",{attrs:{id:"_3-3-字典"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-字典"}},[t._v("#")]),t._v(" 3.3 字典")]),t._v(" "),a("p",[t._v("形式：D =  {key1 : value1, key2 : value2}\n特点：key 必须是唯一的，value 可以不唯一。且 key 必须是不可变的对象，即简单对象。字典不是一个序列。访问时可使用字典的 item 来访问。")]),t._v(" "),a("h3",{attrs:{id:"_3-4-序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-序列"}},[t._v("#")]),t._v(" 3.4 序列")]),t._v(" "),a("p",[t._v("列表、元组和字符串可以看作序列（Sequence）的某种表现形式。\n序列的主要功能是资格测试（Membership Test）（也就是 in 与 not in 表达式）和索引操作（Indexing Operations），它们能够允许我们直接获取序列中的特定项目。\n"),a("strong",[t._v("索引")]),t._v("\n例：S[a]\nS[0]    第一个元素\nS[-1]   倒数第一个元素\n"),a("strong",[t._v("切片")]),t._v("\n操作对象：序列（包括且不限于列表、元组、字符串）\n操作方法："),a("code",[t._v("S[a:b:c]")]),t._v("\na 参数：代表从第几个元素起开始执行切片。省略则代表从开头开始切片。\nb 参数：代表到第几个元素结束，但不包含该元素。省略则代表对后面所有的元素切片。\nc 参数： 代表步长，当步长为-1时代表逆序切片。默认步长为 1.")]),t._v(" "),a("h3",{attrs:{id:"_3-5-集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-集合"}},[t._v("#")]),t._v(" 3.5 集合")]),t._v(" "),a("p",[t._v("形式："),a("code",[t._v("se = set([ ‘a’ , ‘b’, ’c’ ])")])]),t._v(" "),a("blockquote",[a("p",[t._v("注意：set注意不要省略，不然创建的是含有一个列表项目的元组"),a("br"),t._v("\n定义：集合是简单对象的无序集合，主要用于当项目的存在与否比起次序来说更加重要时使用。\n使用方法：\n"),a("code",[t._v("se.add(‘c’)")]),t._v(" 添加项目\n"),a("code",[t._v("se.remove(‘a’)")]),t._v(" 删除项目\n"),a("code",[t._v("se1 & se2")]),t._v(" 取交集\n"),a("code",[t._v("se1.issuperset(se2)")]),t._v(" 检验是否是子集")])]),t._v(" "),a("h3",{attrs:{id:"_3-5-引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-引用"}},[t._v("#")]),t._v(" 3.5 引用")]),t._v(" "),a("p",[t._v("当创建一个对象并将其分配给某个变量时，变量只会查阅某个对象，并且不会代表对象本身，也就是说，变量名只是指向计算机内存中存储了相应对象的那一部分。这叫做将名称绑定给一个对象。主要出现在这几类数据结构中。\n所以：如果想要创建一份诸如序列等复杂对象的副本（而非整数这样的简单的对象）你必须使用切片操作来制作副本。")]),t._v(" "),a("h3",{attrs:{id:"_3-7-字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-字符串"}},[t._v("#")]),t._v(" 3.7 字符串")]),t._v(" "),a("p",[t._v("详见 "),a("code",[t._v("help(str)")])]),t._v(" "),a("h2",{attrs:{id:"_4-面向对象编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-面向对象编程"}},[t._v("#")]),t._v(" 4. 面向对象编程")]),t._v(" "),a("p",[t._v("将数据与功能进行组合，并将其包装在被称作对象的东西内。\n类和对象是面形对象编程的两个主要方面，一个"),a("strong",[t._v("类")]),t._v("（class）能够创建一种新的"),a("strong",[t._v("类型")]),t._v("（type），其中"),a("strong",[t._v("对象")]),t._v("（object）就是类的"),a("strong",[t._v("实例")]),t._v("（instance）\n对象可以使用他的普通变量来存储数据。这种从属于对象或类的变量叫做"),a("strong",[t._v("字段")]),t._v("（field），对象还可以使用属于类的函数来实现某些功能，这种函数叫做类的"),a("strong",[t._v("方法")]),t._v("（method），字段和方法统称类的"),a("strong",[t._v("属性")]),t._v("（atribute）。")]),t._v(" "),a("h3",{attrs:{id:"_4-1-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-类"}},[t._v("#")]),t._v(" 4.1 类")]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\np "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("输出：\n"),a("code",[t._v("<__main__.Person object at 0x10dd2cf98>")]),t._v("\n首先通过class语句以及一个类的名称来创建一个新类，后面缩紧的代码块代表这个类的主体。\n然后，通过采用类的名称后面跟一对括号的方法，给这个类创建一个对象或实例。")]),t._v(" "),a("h3",{attrs:{id:"_4-2-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-方法"}},[t._v("#")]),t._v(" 4.2 方法")]),t._v(" "),a("p",[t._v("类的方法，在某些方面类似于对象的函数，唯一的不同就是方法还拥有一个额外的 self 变量。例：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("say_hi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, how are you?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\np "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("say_hi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),a("p",[t._v("输出：\n"),a("code",[t._v("Hello, how are you?")]),t._v("\n在使用方法时可以不需要参数，但是在定义中可以看到拥有self变量。")]),t._v(" "),a("h4",{attrs:{id:"_4-2-1-init-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-init-方法"}},[t._v("#")]),t._v(" 4.2.1 "),a("strong",[t._v("init")]),t._v(" 方法")]),t._v(" "),a("p",[a("code",[t._v("__init__")]),t._v("方法会在类的对象被实例化时立即运行。可以对任何你想操作的对象进行初始化操作（Initialization），需要自己定义这个方法。\n例：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("say_hi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, my name is'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\np "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Swaroop'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("say_hi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-3-类变量与对象变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-类变量与对象变量"}},[t._v("#")]),t._v(" 4.3 类变量与对象变量")]),t._v(" "),a("p",[t._v("字段时类与对象的数据部分，共有两种类型——类变量与对象变量。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("类变量（Class Variable")]),t._v("）\n类变量是共享的（shared）——他们可以被属于该类的所有实例访问。该类变量只拥有一个副本，当任何一个对象对类变量作出改变时，发生的变动将在其它所有实例中都会得到体现。")]),t._v(" "),a("li",[a("strong",[t._v("对象变量（Object variable）")]),t._v("\n对象变量由类的每一个独立的对象或实例所拥有。在这种情况下，每个对象都拥有属于它自己的字段的副本，也就是说，它们不会被共享，也不会以任何方式与其它不同实例中的相同名称的字段产生关联。\n注：\n当对象想要引用它的类的变量时，可使用 "),a("code",[t._v("self.__class__.name")]),t._v("来引用。如果一个方法是属于类而非属于对象的方法，这就意味着我们可以将它定义为一个 classmethod （类方法）或者是一个 stticmethod（静态方法），这取决于我们是否需要知道这一方法属于哪个类。")])]),t._v(" "),a("h2",{attrs:{id:"_5-输入与输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-输入与输出"}},[t._v("#")]),t._v(" 5. 输入与输出")]),t._v(" "),a("h3",{attrs:{id:"_5-1-用户输入内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-用户输入内容"}},[t._v("#")]),t._v(" 5.1 用户输入内容")]),t._v(" "),a("p",[a("code",[t._v("a = input(‘Enter text’)")])]),t._v(" "),a("h3",{attrs:{id:"_5-2-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-文件"}},[t._v("#")]),t._v(" 5.2 文件")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("poem "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\\\nProgramming is fun\nWhen the work is done\nif you wanna make your work also fun:\n    use Python!\n'''")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打开文件以编辑（'w'riting）")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'poem.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'w'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向文件中编写文本")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("poem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭文件")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果没有特别指定，将假定启用默认的阅读（'r'ead）模式")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'poem.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    line "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 零长度指示 EOF")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("line"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每行（`line`）的末尾")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 都已经有了换行符")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#因为它是从一个文件中进行读取的")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("line"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭文件")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("打开模式：")]),t._v(" "),a("ul",[a("li",[t._v("阅读模式（’r’）默认模式")]),t._v(" "),a("li",[t._v("写入模式（’w’）")]),t._v(" "),a("li",[t._v("追加模式（’a’）\n格式：")]),t._v(" "),a("li",[t._v("文本模式（’t’）默认模式")]),t._v(" "),a("li",[t._v("二进制模式（’b’）")])]),t._v(" "),a("p",[a("strong",[t._v("Pickle 模块")]),t._v("\nPython 提供了一个叫作 Pickle 的标准模块，通过它你可以将任何纯 Python 对象存储到一个文件中，并在稍后将其取回。这叫作持久地（Persistently）存储对象。\n例：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pickle\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 我们存储相关对象的文件的名称")]),t._v("\nshoplistfile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'shoplist.data'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要购买的物品清单")]),t._v("\nshoplist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'apple'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mango'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'carrot'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 准备写入文件")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shoplistfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wb'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 转储对象至文件")]),t._v("\npickle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dump"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shoplist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清除 shoplist 变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("del")]),t._v(" shoplist\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新打开存储文件")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shoplistfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rb'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从文件中载入对象")]),t._v("\nstoredlist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pickle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("load"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("storedlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("封装（picking）\n首先通过open以写入二进制模式打开文件，然后调用 pickle.dump(object, file)")]),t._v(" "),a("li",[t._v("拆封（Unpicking）\n直接调用 pickle.load(file) 来接收返回的对象。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);